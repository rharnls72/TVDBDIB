<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="com.web.curation.dao.episode.EpisodeDao">
   
    <!-- Create -->
    <insert id="addNewEpisode">
        insert into
            episode(
                `pno`
                , `season`
                , `episode`
            )
        values(
            #{pno}
            , #{season}
            , #{episode}
        )
    </insert>

    <!-- Read -->
    <select id="checkDataExist" resultType="int">
        select
            count(`eno`)
        from
            `episode`
        where
            `pno` = #{pno}
            and
            `season` = #{season}
            and
            `episode` = #{episode}
    </select>

    <select id="getSimpleEpisodeInfo" resultType="EpisodeDB">
        select
            `pno`
            , `season`
            , `episode`
        from
            `episode`
        where
            `eno` = #{value}
    </select>

    <select id="getLikeReplyInfo" resultType="EpisodeDB">
        select
            e.eno as `eno`
            , e.pno as `pno`
            , e.season as `season`
            , e.episode as `episode`
            , e.share_num as `share_num`
            , (
                select
                    count(er.erno)
                from
                    `episode_reply` er
                where
                    er.eno = e.eno
            ) as `reply_num`
            , (
                select
                    CONCAT(`writer_nick_name`, ':', `content`)
                from
                    `episode_reply_view` erv
                where
                    erv.parent_reply is null
                    and
                    erv.eno = e.eno
                order by erv.like_num desc
                limit 1
            ) as `reply_content`
            , (
                select
                    count(el.lno)
                from
                    `episode_like` el
                where
                    el.eno = e.eno
            ) as `like_num`
            , if((
                select
                    count(el.lno)
                from
                    `episode_like` el
                where
                    el.eno = e.eno
                    and
                    el.uno = #{uno}
            ) > 0, true, false) as `press_like`
            , (
                select
                    count(ed.dno)
                from
                    `episode_dibs` ed
                where
                    ed.eno = e.eno
            ) as `dibs_num`
            , if((
                select
                    count(ed.dno)
                from
                    `episode_dibs` ed
                where
                    ed.eno = e.eno
                    and
                    ed.uno = #{uno}
            ) > 0, true, false) as `press_dibs`
        from
            <choose>
                <when test="is_dibs == 0">
                    `episode` e
                </when>
                <otherwise>
                    (
                        SELECT
                            `eno`
                            , `dno`
                        FROM
                            `episode_dibs`
                        WHERE
                            `uno` = #{uno}
                        ORDER BY `dno` DESC
                        LIMIT ${num}, 20
                    ) d
                        JOIN
                    `episode` e ON d.eno = e.eno
                </otherwise>
            </choose>
        <if test="is_dibs == 0">
            where
                `pno` = #{pno}
                and
                `season` = #{season}
                and
                `episode` = #{episode}
        </if>
        <if test="is_dibs != 0">
            ORDER BY d.dno DESC
        </if>
    </select>

    <!-- Update -->
    <update id="increaseShare">
        update
            `episode`
        set
            `share_num` = `share_num` + 1
        where
            `eno` = #{value}
    </update>

    <!-- Delete -->
    <delete id="deleteEpisode">
        delete from
            `episode`
        where
            `eno` = #{value}
    </delete>

</mapper>